
ServoHand.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001de  00000272  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800102  00800102  00000274  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d12  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c6  00000000  00000000  000010f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006de  00000000  00000000  000019bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000274  00000000  00000000  0000209c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000562  00000000  00000000  00002310  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000544  00000000  00000000  00002872  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00002db6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__vector_11>
  30:	0c 94 cb 00 	jmp	0x196	; 0x196 <__vector_12>
  34:	0c 94 a9 00 	jmp	0x152	; 0x152 <__vector_13>
  38:	0c 94 c1 00 	jmp	0x182	; 0x182 <__vector_14>
  3c:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__vector_15>
  40:	0c 94 df 00 	jmp	0x1be	; 0x1be <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 6f 00 	jmp	0xde	; 0xde <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ed       	ldi	r30, 0xDE	; 222
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 30       	cpi	r26, 0x06	; 6
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 90 00 	call	0x120	; 0x120 <main>
  9e:	0c 94 ed 00 	jmp	0x1da	; 0x1da <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adcInit>:
	DIDR0 |= (1<<pin);
}
//disable ADC to chosen pin by enable digital
void adcPinDisable(uint8_t pin)
{
	DIDR0 &= ~(1<<pin);;
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  ac:	8b e9       	ldi	r24, 0x9B	; 155
  ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b2:	08 95       	ret

000000b4 <adcPinEnable>:
  b4:	ee e7       	ldi	r30, 0x7E	; 126
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	90 81       	ld	r25, Z
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	01 c0       	rjmp	.+2      	; 0xc2 <adcPinEnable+0xe>
  c0:	22 0f       	add	r18, r18
  c2:	8a 95       	dec	r24
  c4:	ea f7       	brpl	.-6      	; 0xc0 <adcPinEnable+0xc>
  c6:	29 2b       	or	r18, r25
  c8:	20 83       	st	Z, r18
  ca:	08 95       	ret

000000cc <adcPinSelect>:
}
void adcPinSelect(uint8_t pin)
{
	//clear lower 4 bits while keeping settings
	ADMUX &= 0xF0;
  cc:	ec e7       	ldi	r30, 0x7C	; 124
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	90 81       	ld	r25, Z
  d2:	90 7f       	andi	r25, 0xF0	; 240
  d4:	90 83       	st	Z, r25
	ADMUX |= pin;
  d6:	90 81       	ld	r25, Z
  d8:	89 2b       	or	r24, r25
  da:	80 83       	st	Z, r24
  dc:	08 95       	ret

000000de <__vector_21>:
}
//ADC conversion complete
ISR(ADC_vect)
{
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	8f 93       	push	r24
	g_ADCConDone = 1;	
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
  f0:	8f 91       	pop	r24
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <adcConversion>:
{
	uint8_t tempH=0; //temporary vars for conversion
	uint8_t tempL=0;
	
	//currently converting
	g_ADCConDone=0;
  fc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	//start conversion
	ADCSRA |= (1<<ADSC);
 100:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 104:	80 64       	ori	r24, 0x40	; 64
 106:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	//wait for conversion to complete
	while(g_ADCConDone == 0);
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 10e:	88 23       	and	r24, r24
 110:	e1 f3       	breq	.-8      	; 0x10a <adcConversion+0xe>
	
	//read adcl and shift over to read adch
	tempL = ADCL;
 112:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	tempH = ADCH;
 116:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	// uint16_t adValue = ADCL;
	// adValue |= (uint16_t)(ADCH << 8);

	return(tempH|tempL);
 11a:	89 2b       	or	r24, r25
}
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	08 95       	ret

00000120 <main>:


int main()
{

	DDRB = 0xFF;
 120:	8f ef       	ldi	r24, 0xFF	; 255
 122:	84 b9       	out	0x04, r24	; 4
	adcInit();
 124:	0e 94 53 00 	call	0xa6	; 0xa6 <adcInit>
	adcPinEnable(ADC0PIN);
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	0e 94 5a 00 	call	0xb4	; 0xb4 <adcPinEnable>
	adcPinSelect(ADC0PIN);
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	0e 94 66 00 	call	0xcc	; 0xcc <adcPinSelect>
	sei();
 134:	78 94       	sei
	while (1)
	{
		uint16_t tempV = adcConversion();
		float volts = ((float)tempV +0.5)/1024.0 * 5.0;
		if(tempV > 250)
			PORTB = 1<<5;
 136:	c0 e2       	ldi	r28, 0x20	; 32
	adcPinSelect(ADC0PIN);
	sei();

	while (1)
	{
		uint16_t tempV = adcConversion();
 138:	0e 94 7e 00 	call	0xfc	; 0xfc <adcConversion>
		float volts = ((float)tempV +0.5)/1024.0 * 5.0;
		if(tempV > 250)
 13c:	8b 3f       	cpi	r24, 0xFB	; 251
 13e:	91 05       	cpc	r25, r1
 140:	30 f0       	brcs	.+12     	; 0x14e <main+0x2e>
			PORTB = 1<<5;
 142:	c5 b9       	out	0x05, r28	; 5
	adcPinSelect(ADC0PIN);
	sei();

	while (1)
	{
		uint16_t tempV = adcConversion();
 144:	0e 94 7e 00 	call	0xfc	; 0xfc <adcConversion>
		float volts = ((float)tempV +0.5)/1024.0 * 5.0;
		if(tempV > 250)
 148:	8b 3f       	cpi	r24, 0xFB	; 251
 14a:	91 05       	cpc	r25, r1
 14c:	d0 f7       	brcc	.-12     	; 0x142 <main+0x22>
			PORTB = 1<<5;
		else
		PORTB = 0;
 14e:	15 b8       	out	0x05, r1	; 5
 150:	f3 cf       	rjmp	.-26     	; 0x138 <main+0x18>

00000152 <__vector_13>:
//int temp = g_update_pwm1A_ready;
}
ISR(TIMER1_COMPB_vect){
	
}
ISR(TIMER1_OVF_vect){
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
	g_update_pwm1A_ready = 0;
 15c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <g_update_pwm1A_ready>
	g_update_pwm1B_ready = 0;
 160:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
}
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <__vector_15>:
ISR(TIMER0_COMPA_vect){
	
}
ISR(TIMER0_COMPB_vect){
 16e:	1f 92       	push	r1
 170:	0f 92       	push	r0
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	0f 92       	push	r0
 176:	11 24       	eor	r1, r1
	
}
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <__vector_14>:
 182:	1f 92       	push	r1
 184:	0f 92       	push	r0
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	0f 92       	push	r0
 18a:	11 24       	eor	r1, r1
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <__vector_12>:
 196:	1f 92       	push	r1
 198:	0f 92       	push	r0
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	0f 92       	push	r0
 19e:	11 24       	eor	r1, r1
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <__vector_11>:
 1aa:	1f 92       	push	r1
 1ac:	0f 92       	push	r0
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	0f 92       	push	r0
 1b2:	11 24       	eor	r1, r1
 1b4:	0f 90       	pop	r0
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	0f 90       	pop	r0
 1ba:	1f 90       	pop	r1
 1bc:	18 95       	reti

000001be <__vector_16>:
ISR(TIMER0_OVF_vect){
 1be:	1f 92       	push	r1
 1c0:	0f 92       	push	r0
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	0f 92       	push	r0
 1c6:	11 24       	eor	r1, r1
	g_update_pwm0A_ready = 0;
 1c8:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <g_update_pwm0A_ready>
	g_update_pwm0B_ready = 0;
 1cc:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <g_update_pwm0B_ready>
}
 1d0:	0f 90       	pop	r0
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	0f 90       	pop	r0
 1d6:	1f 90       	pop	r1
 1d8:	18 95       	reti

000001da <_exit>:
 1da:	f8 94       	cli

000001dc <__stop_program>:
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <__stop_program>
